<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Posts on 眠</title>
        <link>https://blog.zzzzz.li/posts/</link>
        <description>Recent content in Posts on 眠</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>cn</language>
        <copyright>&lt;a href=&#34;https://creativecommons.org/licenses/by-nc/4.0/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CC BY-NC 4.0&lt;/a&gt;</copyright>
        <lastBuildDate>Thu, 06 May 2021 17:10:47 +0800</lastBuildDate>
        <atom:link href="https://blog.zzzzz.li/posts/index.xml" rel="self" type="application/rss+xml" />
        
        <item>
            <title>《双人成行》--全程的劲头都很足</title>
            <link>https://blog.zzzzz.li/posts/it-takes-two/</link>
            <pubDate>Thu, 06 May 2021 17:10:47 +0800</pubDate>
            
            <guid>https://blog.zzzzz.li/posts/it-takes-two/</guid>
            <description>一部值得被载入史册的作品。 Day 1：居然五一不出门玩，在家玩游戏？ 这个游戏其实心水了好久(3.26就发售了)，但鉴于只能两个人一起玩，于是拖到了</description>
            <content type="html"><![CDATA[<p><img src="https://img.zzzzz.li/original.jpeg" alt="it takes two"></p>
<blockquote>
<p>一部值得被载入史册的作品。</p>
</blockquote>
<h2 id="day-1居然五一不出门玩在家玩游戏">Day 1：居然五一不出门玩，在家玩游戏？</h2>
<p>这个游戏其实心水了好久(3.26就发售了)，但鉴于只能两个人一起玩，于是拖到了这次五一假期和对象的见面。</p>
<p><img src="https://img.zzzzz.li/blog/biQ8glh-edj9ZwT3cS1hc-u0.jpeg?imageMogr2/thumbnail/760x" alt="一起飞翔"></p>
<p>《双人成行》（It Takes Two）是一款由雾影工作室开发，艺电以EA Originals为名发行的动作冒险平台游戏。玩过《逃出生天》这款游戏的可能知道该游戏的总监&ndash;约瑟夫·法尔斯，这个老哥在《双人成行》发布前对玩家大放厥词：</p>
<blockquote>
<p>“关于《双人成行》我有一点可以向你们保证，全程的劲头都很足，你可以引用我的话作为标题，如果有人发自肺腑的表示「这游戏没什么意思」，我可以给讲这话的人 1000 美元。”</p>
</blockquote>
<p><em>“你玩男生还是女生？”</em></p>
<p><em>“当然玩女的！”</em></p>
<p><em>“我感觉女的蛮难的……”</em></p>
<p>在甜甜尝试了手柄的瞬间就放弃之后(单机游玩该游戏需要至少有一个熟悉手柄&ndash;我们是一个玩键盘一个玩手柄)，转向了键盘+鼠标控制，大概是她不习惯手柄的原因，这让我曾经想给她推荐一起玩《怪物猎人·rise》的想法泼了一盆冷水。</p>
<p><img src="https://img.zzzzz.li/blog/14c1bffe4f.jpeg?imageMogr2/thumbnail/760x" alt="Game Start!"></p>
<p>她这一年的时间仅仅在假期能够跟我一起玩游戏，其他时间都是满满的安排&ndash;令人羡慕。</p>
<h2 id="day-2故事的起点结局">DAY 2：故事的起点，结局</h2>
<p>科迪和小梅的女儿罗斯因为担心父母吵架离婚，将愿望转变为咒语，导致爸妈的灵魂附在了两只玩偶上。玩家们需要以玩偶的身份解决一系列难题，最后找到解除咒语的方法，期间所谓的「爱情之书」哈金博士会一直捣蛋。理所应当的，夫妻在冒险中重新产生了羁绊，最后重归于好。</p>
<p>游戏似乎没用太过于深刻的讨论，平铺直叙的讲述夫妻俩之间的故事。科迪只是个不修边幅、失去激情的男人，小梅只是个不顾家的工作狂，而罗斯只是名懂事又孤独的孩子，矛盾就这么简单。</p>
<p><img src="https://img.zzzzz.li/blog/biQ8glh-1ahjZhT3cS1hc-u0.jpeg?imageMogr2/thumbnail/760x" alt="一起飞翔"></p>
<p>其实相比于太过平实的故事，游戏中的一部分角色塑造得还算鲜活。操着西班牙口音的哈金博士刻板而令人生厌，你同样能感受到科迪和小梅内心中变扭的情绪，两人的情感转变倒也不显突兀。再加上制作组设计了许多迪士尼般的搞怪卡通形象，比如军阀化的松鼠头子，整个过程让人眼花缭乱。</p>
<h2 id="day-3年度最佳">DAY 3：年度最佳</h2>
<p>对象在快结束游戏前这么看着我说，言辞恳切，双眼灵动：</p>
<p><em>“我觉得这是年度最佳游戏！”</em></p>
<p><em>“我赞同你的赞同！”</em></p>
<p><em>“2077不算在今年吧?！”</em></p>
<p>我对象太可爱了，我在一旁狂笑.</p>
<p>游戏的每个关卡设计都有算是独特的玩法（有些人说是缝合怪，我也不反对，但能做成这样以至于脱离了缝合这个词而拥有自己的美感），解谜要素与战斗要素几乎一致，难度系数不高，手残党都能愉快的玩耍（你要是卡那里过不去的就当我没说哈哈哈你打我呀）。</p>
<p><img src="https://img.zzzzz.li/blog/790.jpeg?imageMogr2/thumbnail/760x" alt="地牢"></p>
<p>让我印象最深的，大概是一个地牢场景的合屏。两名玩家分别扮演战士和法师，以 60° 俯视角的形式进行探险。该关卡全程都没有分屏，完全可以拎出来当成另一款游戏。此外有些镜头在合屏的情况下带来了更强的视觉冲击力，比如雪域和钟楼里的横向卷轴视角，以及一个往上攀登阶梯的长镜头。</p>
<p>在钟楼的一个场景中，科迪只能起到调节物品时间的作用，不需要太多视觉提示，因此针对跑跑跳跳干实事的梅，她的分屏比例明显就变大了，对于什么地方该呈现什么内容，开发团队的思路非常清晰，独到。</p>
<h2 id="演出">演出！</h2>
<p>游戏中令人印象深刻的部分当然也包括结局时:当梅和科迪拥抱在一起,整个游戏的故事剧情走向一个偏向与完美的结局,而此时我们方从这十余小时的震撼中回过神来.</p>
<p><img src="https://img.zzzzz.li/blog/IMG_2691_20210503-225617.JPG?imageMogr2/thumbnail/760x" alt="梅和科迪"></p>
<p>游戏中包含复数个精致的主题公园世界。摆满了玩具的小屋，玻璃球里的雪中探险，由模型构筑的奇幻城堡等等，其中有非常多的彩蛋和小游戏等着玩家探索。比如可以互动的相机，除了拍照和拉动焦距这种基础功能外，开发团队还精心搭建了几个可更换的场景，吐出的照片更是能实时挂到墙上，可惜的是结局的时候体现在片尾就更好了。</p>
<p>第三幕的树下场景给我感觉最美的（当然最后一幕也不差，够炫酷），当脚下和身边的荧光逐渐亮起的时候，我俩都一边说着“真漂亮”，一边踩进水里、踩进空气。就好像体会到了主人公原本阴沉沉突然就明亮了起来的心情似的。</p>
<p><img src="https://img.zzzzz.li/blog/14c1bffe4f.jpeg?imageMogr2/thumbnail/760x" alt="树下场景"></p>
<h2 id="写在最后">写在最后</h2>
<p>五一的第一天一起去国家大剧院听交响乐，回家路上各种闲聊，但一到家就抛之脑后了（笑～），这说明游戏的吸引力确实大吧。</p>
<p><img src="https://img.zzzzz.li/blog/20210508-IMG_2671.jpg?imageMogr2/thumbnail/760x" alt="去国家大剧院中"></p>
<p><img src="https://img.zzzzz.li/blog/20210508-IMG_2676-min.jpg?imageMogr2/thumbnail/760x" alt="国家大剧院"></p>
<p><img src="https://img.zzzzz.li/blog/0145B55C-71C2-4DC2-B57C-B96D5D7EF535_1_105_c.jpeg?imageMogr2/thumbnail/760x" alt="票"></p>
<p>关于游戏的黑暗面：</p>
<ol>
<li>手撕可爱的小像&ndash;有的玩家在这里弃坑，我们在这里也感到了不适，虽然在结局补好了吧，这里硬是这种描述我也没感觉到内在有何深刻的含义（捂脸）；</li>
<li>干掉老旧的吸尘器&ndash;我自己也干过这种事儿啊！有更好的为什么不换呢！（但甜甜永远是最好的！）</li>
</ol>
<p>其他方面：</p>
<p>其实该游戏真的好玩，也就是对象在某个跳跃环节卡了十几分钟时那股倔犟劲儿让人觉得怎能如此可爱以及部分关卡设计的过于长了（是的我说的就是猴子！！！唯一觉得有点腻高呼怎么还没完的地方）。</p>
<h2 id="推荐程度墙裂推荐最好你有对象或者基友也可以凑合凑合">推荐程度：墙裂推荐（最好你有对象或者基友也可以凑合凑合）</h2>
]]></content>
        </item>
        
        <item>
            <title>Linux Cached 过大问题</title>
            <link>https://blog.zzzzz.li/posts/linux-cached-too-large-problem/</link>
            <pubDate>Wed, 10 Mar 2021 16:44:27 +0800</pubDate>
            
            <guid>https://blog.zzzzz.li/posts/linux-cached-too-large-problem/</guid>
            <description>Linux Cached 过大问题 某日,愉悦Coding. 负责人抛过来一个问题:“XXX说咱们的服务内存使用量过大,你接下来看看这个问题.” 此时的我一脸蒙蔽的ss</description>
            <content type="html"><![CDATA[<h2 id="linux-cached-过大问题">Linux Cached 过大问题</h2>
<p>某日,愉悦Coding.</p>
<p>负责人抛过来一个问题:“XXX说咱们的服务内存使用量过大,你接下来看看这个问题.”</p>
<p>此时的我一脸蒙蔽的ssh到VM上输入如下命令 <code>free -h</code> 此时bash显示</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">free -h
            total        used        free      shared  buff/cache   available
Mem:          11G        1.5G        3.5G        184M        6.6G        9.6G
Swap:        4.0G          0B        4.0G
</code></pre></div><p>懵逼的我不禁发出了感叹&ndash;这内存状况良好得运维看了都想给机器减配!</p>
<p>只好再看看服务的状况了 于是我敲下了以下命令 <code>top</code> 映入眼帘的景象让我大呼上当</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash"> PID USER   PR  NI VIRT RES    SHR S  %CPU %MEM     TIME+ COMMAND
 **** ****  <span style="color:#ae81ff">20</span>   <span style="color:#ae81ff">0</span> **** ****  **** S  21.3  2.2 147:22.09 node /home/www
 **** ****  <span style="color:#ae81ff">20</span>   <span style="color:#ae81ff">0</span> **** ****  **** S  14.0  2.2 136:32.45 node /home/www
 **** ****  <span style="color:#ae81ff">20</span>   <span style="color:#ae81ff">0</span> **** ****  **** S   5.3  2.6 145:11.27 node /home/www
 **** ****  <span style="color:#ae81ff">20</span>   <span style="color:#ae81ff">0</span> **** ****  **** S   3.0  2.2 147:21.91 node /home/www
</code></pre></div><p>平均每个进程3%不到的占用,怎么就内存使用过大了?</p>
<p>由于感觉到事情已经超出了自己的认知能力,只好找到负责人:“我看服务状况蛮好啊,XXX为啥说过大?”</p>
<p>XXX加入会话:“监控系统显示内存剩余量只有1.5G左右了,怕流量打起来出故障.”</p>
<p>我一脸问号,并贴出了大大的❓❓❓</p>
<p>老哥怕不是把cached内存算在不可使用内存范围了,后续沟通证明事实确实如此,误会接触.</p>
<h3 id="那么为啥会产生这样的误会呢">那么为啥会产生这样的误会呢</h3>
<p>我们搞前端的兄弟们写习惯了UI,少有接触linux知识,我们先来了解下Linux下的buff/cache memery 到底是个啥?</p>
<ul>
<li>
<p>buff（Buffer Cache）是一种I/O缓存，用于内存和硬盘的缓冲，是io设备的读写缓冲区。根据磁盘的读写设计的，把分散的写操作集中进行，减少磁盘碎片和硬盘的反复寻道，从而提高系统性能。</p>
</li>
<li>
<p>cache（Page Cache）是一种高速缓存，用于CPU和内存之间的缓冲 ,是文件系统的cache。把读取过的数据保存起来，重新读取时若命中（找到需要的数据）就不要去读硬盘了，若没有命中就读硬盘。其中的数据会根据读取频率进行组织，把最频繁读取的内容放在最容易找到的位置，把不再读的内容不断往后排，直至从中删除。</p>
</li>
</ul>
<p>有心的小伙伴可以扩展查看<a href="https://tldp.org/LDP/sag/html/buffer-cache.html">《Linux System Administrators Guide:Chapter 6. Memory Management》</a></p>
<p>简单点来说:Buffer Cache是即将写入磁盘的数据,Page Cache则是从磁盘中读取的数据.他们都占用内存,且都存储在RAM中.</p>
<p>不过它们虽然都占用内存但是在合适的时机会被内核释放掉,而一般情况下不需要我们去关注cached内存,它的存在可以增加文件的读写性能.</p>
<p>那么看到这里的看官可能已经猜到为啥我们这个服务的cached内存占用8Gb了&ndash;是的没错,写日志文件!</p>
<p>好了今天的总结就到此为止.顺带贴上一篇贼出名的文章<a href="https://www.linuxatemyram.com/">《linux ate my ram》</a></p>
<h3 id="但是有的人看着不爽">但是有的人看着不爽</h3>
<p>既然看着不爽,那就只能手动或者定时任务来清理它啦!</p>
<p>手动清理</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">server# sync <span style="color:#75715e">#一定要记得这个写入硬盘，防止数据丢失</span>
server# echo <span style="color:#ae81ff">1</span> &gt; /proc/sys/vm/drop_caches
server# echo <span style="color:#ae81ff">1</span> &gt; /proc/sys/vm/drop_caches
server# echo <span style="color:#ae81ff">1</span> &gt; /proc/sys/vm/drop_caches
</code></pre></div><p>写成脚本</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash"><span style="color:#75715e">#!/bin/bash
</span><span style="color:#75715e"></span>echo <span style="color:#e6db74">&#34;清除cached缓存&#34;</span>
sync
sleep <span style="color:#ae81ff">10</span>
echo <span style="color:#ae81ff">1</span> &gt; /proc/sys/vm/drop_caches
echo <span style="color:#ae81ff">2</span> &gt; /proc/sys/vm/drop_caches
echo <span style="color:#ae81ff">3</span> &gt; /proc/sys/vm/drop_caches
</code></pre></div><p>然后就是创建该脚本的定时任务啦!</p>
]]></content>
        </item>
        
        <item>
            <title>从一个Bug说起</title>
            <link>https://blog.zzzzz.li/posts/javascript-type-from-a-bug/</link>
            <pubDate>Thu, 05 Nov 2020 11:19:58 +0800</pubDate>
            
            <guid>https://blog.zzzzz.li/posts/javascript-type-from-a-bug/</guid>
            <description>JavaScript的类型判断 类型 基本类型 Undefined Null Boolean Number String Symble 复杂类型 Object Array RegExp Date Function (Set Map) 其他 Document Error .etc 判断方法 typeof let bool = true let num = 1 let str = &amp;#39;abc&amp;#39; let und = undefined let nul = null let arr</description>
            <content type="html"><![CDATA[<h2 id="javascript的类型判断">JavaScript的类型判断</h2>
<h3 id="类型">类型</h3>
<p>基本类型 Undefined Null Boolean Number String Symble</p>
<p>复杂类型 Object Array RegExp Date Function (Set Map)</p>
<p>其他 Document Error .etc</p>
<h3 id="判断方法">判断方法</h3>
<h4 id="typeof">typeof</h4>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js"><span style="color:#66d9ef">let</span> <span style="color:#a6e22e">bool</span> <span style="color:#f92672">=</span> <span style="color:#66d9ef">true</span>
<span style="color:#66d9ef">let</span> <span style="color:#a6e22e">num</span> <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span>
<span style="color:#66d9ef">let</span> <span style="color:#a6e22e">str</span> <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;abc&#39;</span>
<span style="color:#66d9ef">let</span> <span style="color:#a6e22e">und</span> <span style="color:#f92672">=</span> <span style="color:#66d9ef">undefined</span>
<span style="color:#66d9ef">let</span> <span style="color:#a6e22e">nul</span> <span style="color:#f92672">=</span> <span style="color:#66d9ef">null</span>
<span style="color:#66d9ef">let</span> <span style="color:#a6e22e">arr</span> <span style="color:#f92672">=</span> [<span style="color:#ae81ff">1</span>,<span style="color:#ae81ff">2</span>,<span style="color:#ae81ff">3</span>]
<span style="color:#66d9ef">let</span> <span style="color:#a6e22e">obj</span> <span style="color:#f92672">=</span> {}
<span style="color:#66d9ef">let</span> <span style="color:#a6e22e">fun</span> <span style="color:#f92672">=</span> <span style="color:#66d9ef">function</span>(){}
<span style="color:#66d9ef">let</span> <span style="color:#a6e22e">reg</span> <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> RegExp()
<span style="color:#66d9ef">let</span> <span style="color:#a6e22e">date</span> <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> Date()


<span style="color:#a6e22e">console</span>.<span style="color:#a6e22e">log</span>(<span style="color:#66d9ef">typeof</span> <span style="color:#a6e22e">bool</span>); <span style="color:#75715e">//boolean
</span><span style="color:#75715e"></span><span style="color:#a6e22e">console</span>.<span style="color:#a6e22e">log</span>(<span style="color:#66d9ef">typeof</span> <span style="color:#a6e22e">num</span>); <span style="color:#75715e">//number
</span><span style="color:#75715e"></span><span style="color:#a6e22e">console</span>.<span style="color:#a6e22e">log</span>(<span style="color:#66d9ef">typeof</span> <span style="color:#a6e22e">str</span>); <span style="color:#75715e">//string
</span><span style="color:#75715e"></span><span style="color:#a6e22e">console</span>.<span style="color:#a6e22e">log</span>(<span style="color:#66d9ef">typeof</span> <span style="color:#a6e22e">und</span>); <span style="color:#75715e">//undefined
</span><span style="color:#75715e"></span><span style="color:#a6e22e">console</span>.<span style="color:#a6e22e">log</span>(<span style="color:#66d9ef">typeof</span> <span style="color:#a6e22e">nul</span>); <span style="color:#75715e">//object
</span><span style="color:#75715e"></span><span style="color:#a6e22e">console</span>.<span style="color:#a6e22e">log</span>(<span style="color:#66d9ef">typeof</span> <span style="color:#a6e22e">arr</span>); <span style="color:#75715e">//object
</span><span style="color:#75715e"></span><span style="color:#a6e22e">console</span>.<span style="color:#a6e22e">log</span>(<span style="color:#66d9ef">typeof</span> <span style="color:#a6e22e">obj</span>); <span style="color:#75715e">//object
</span><span style="color:#75715e"></span><span style="color:#a6e22e">console</span>.<span style="color:#a6e22e">log</span>(<span style="color:#66d9ef">typeof</span> <span style="color:#a6e22e">reg</span>); <span style="color:#75715e">//object
</span><span style="color:#75715e"></span><span style="color:#a6e22e">console</span>.<span style="color:#a6e22e">log</span>(<span style="color:#66d9ef">typeof</span> <span style="color:#a6e22e">fun</span>); <span style="color:#75715e">//function
</span><span style="color:#75715e"></span><span style="color:#a6e22e">console</span>.<span style="color:#a6e22e">log</span>(<span style="color:#66d9ef">typeof</span> <span style="color:#a6e22e">date</span>); <span style="color:#75715e">//object
</span></code></pre></div><h4 id="instanceof">instanceof</h4>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js"><span style="color:#a6e22e">console</span>.<span style="color:#a6e22e">log</span>(<span style="color:#a6e22e">reg</span> <span style="color:#66d9ef">instanceof</span> Object); <span style="color:#75715e">//true
</span><span style="color:#75715e"></span><span style="color:#a6e22e">console</span>.<span style="color:#a6e22e">log</span>(<span style="color:#a6e22e">reg</span> <span style="color:#66d9ef">instanceof</span> RegExp); <span style="color:#75715e">//true
</span><span style="color:#75715e"></span><span style="color:#a6e22e">console</span>.<span style="color:#a6e22e">log</span>(<span style="color:#a6e22e">und</span> <span style="color:#66d9ef">instanceof</span> Object); <span style="color:#75715e">// false
</span><span style="color:#75715e"></span><span style="color:#a6e22e">console</span>.<span style="color:#a6e22e">log</span>(<span style="color:#a6e22e">nul</span> <span style="color:#66d9ef">instanceof</span> Object); <span style="color:#75715e">// false
</span><span style="color:#75715e"></span>
<span style="color:#75715e">// 思考
</span><span style="color:#75715e"></span><span style="color:#a6e22e">console</span>.<span style="color:#a6e22e">log</span>(<span style="color:#a6e22e">bool</span> <span style="color:#66d9ef">instanceof</span> Boolean);  <span style="color:#75715e">//false
</span><span style="color:#75715e"></span><span style="color:#66d9ef">let</span> <span style="color:#a6e22e">bool2</span> <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> Boolean();
<span style="color:#a6e22e">console</span>.<span style="color:#a6e22e">log</span>(<span style="color:#a6e22e">bool2</span> <span style="color:#66d9ef">instanceof</span> Boolean); <span style="color:#75715e">//true
</span><span style="color:#75715e"></span>
<span style="color:#a6e22e">console</span>.<span style="color:#a6e22e">log</span>(<span style="color:#a6e22e">fun</span> <span style="color:#66d9ef">instanceof</span> Function) <span style="color:#75715e">//true
</span><span style="color:#75715e"></span><span style="color:#66d9ef">let</span> <span style="color:#a6e22e">fun</span> <span style="color:#f92672">=</span> <span style="color:#66d9ef">function</span>(){<span style="color:#66d9ef">this</span>.<span style="color:#a6e22e">name</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;22&#34;</span>;};
<span style="color:#a6e22e">console</span>.<span style="color:#a6e22e">log</span>(<span style="color:#a6e22e">fun</span> <span style="color:#66d9ef">instanceof</span> <span style="color:#66d9ef">function</span> ) <span style="color:#75715e">//false
</span><span style="color:#75715e"></span>
<span style="color:#66d9ef">var</span> <span style="color:#a6e22e">obj</span> <span style="color:#f92672">=</span> Object.<span style="color:#a6e22e">create</span>(<span style="color:#66d9ef">null</span>);
<span style="color:#66d9ef">typeof</span> <span style="color:#a6e22e">obj</span>              <span style="color:#75715e">// &#34;object&#34;
</span><span style="color:#75715e"></span><span style="color:#a6e22e">obj</span> <span style="color:#66d9ef">instanceof</span> Object   <span style="color:#75715e">// false
</span></code></pre></div><p>instanceof它不仅检测构造找个对象的构造器，还检测原型链。所以它可以检测继承而来的属性。</p>
<p>搞点事情</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js"><span style="color:#66d9ef">const</span> <span style="color:#a6e22e">s</span> <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> String(<span style="color:#e6db74">&#39;123&#39;</span>);

<span style="color:#a6e22e">s</span> <span style="color:#66d9ef">instanceof</span> String; <span style="color:#75715e">// true
</span><span style="color:#75715e"></span><span style="color:#a6e22e">s</span> <span style="color:#66d9ef">instanceof</span> Object; <span style="color:#75715e">// true
</span><span style="color:#75715e"></span>

<span style="color:#a6e22e">s</span>.<span style="color:#ae81ff">__</span><span style="color:#a6e22e">proto__</span> <span style="color:#f92672">=</span> Object.<span style="color:#a6e22e">prototype</span>;

<span style="color:#a6e22e">s</span> <span style="color:#66d9ef">instanceof</span> String; <span style="color:#75715e">// false
</span><span style="color:#75715e"></span><span style="color:#a6e22e">s</span> <span style="color:#66d9ef">instanceof</span> Object; <span style="color:#75715e">// true
</span></code></pre></div><div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js"><span style="color:#66d9ef">function</span> <span style="color:#a6e22e">Animal</span> (<span style="color:#a6e22e">name</span>) {
    <span style="color:#66d9ef">this</span>.<span style="color:#a6e22e">name</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">name</span>
}

<span style="color:#66d9ef">const</span> <span style="color:#a6e22e">lion</span> <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> <span style="color:#a6e22e">Animal</span>(<span style="color:#e6db74">&#39;lion&#39;</span>);
<span style="color:#a6e22e">lion</span> <span style="color:#66d9ef">instanceof</span> <span style="color:#a6e22e">Animal</span> <span style="color:#75715e">// true
</span></code></pre></div><h4 id="constructor">constructor</h4>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js"><span style="color:#a6e22e">console</span>.<span style="color:#a6e22e">log</span>(<span style="color:#a6e22e">bool</span>.<span style="color:#a6e22e">constructor</span> <span style="color:#f92672">===</span> Boolean);<span style="color:#75715e">// true
</span><span style="color:#75715e"></span><span style="color:#a6e22e">console</span>.<span style="color:#a6e22e">log</span>(<span style="color:#a6e22e">num</span>.<span style="color:#a6e22e">constructor</span> <span style="color:#f92672">===</span> Number);<span style="color:#75715e">// true
</span><span style="color:#75715e"></span><span style="color:#a6e22e">console</span>.<span style="color:#a6e22e">log</span>(<span style="color:#a6e22e">str</span>.<span style="color:#a6e22e">constructor</span> <span style="color:#f92672">===</span> String);<span style="color:#75715e">// true
</span><span style="color:#75715e"></span><span style="color:#a6e22e">console</span>.<span style="color:#a6e22e">log</span>(<span style="color:#a6e22e">arr</span>.<span style="color:#a6e22e">constructor</span> <span style="color:#f92672">===</span> Array);<span style="color:#75715e">// true
</span><span style="color:#75715e"></span><span style="color:#a6e22e">console</span>.<span style="color:#a6e22e">log</span>(<span style="color:#a6e22e">obj</span>.<span style="color:#a6e22e">constructor</span> <span style="color:#f92672">===</span> Object);<span style="color:#75715e">// true
</span><span style="color:#75715e"></span><span style="color:#a6e22e">console</span>.<span style="color:#a6e22e">log</span>(<span style="color:#a6e22e">fun</span>.<span style="color:#a6e22e">constructor</span> <span style="color:#f92672">===</span> Function);<span style="color:#75715e">// true
</span><span style="color:#75715e"></span>
<span style="color:#66d9ef">function</span> <span style="color:#a6e22e">Foo</span>() {}
<span style="color:#66d9ef">var</span> <span style="color:#a6e22e">f</span> <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> <span style="color:#a6e22e">Foo</span>();
<span style="color:#a6e22e">f</span>.<span style="color:#a6e22e">constructor</span>.<span style="color:#a6e22e">name</span> <span style="color:#75715e">// &#34;Foo&#34;
</span></code></pre></div><h4 id="prototype">prototype</h4>
<p>Object.prototype.toString.call</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js"><span style="color:#a6e22e">console</span>.<span style="color:#a6e22e">log</span>(Object.<span style="color:#a6e22e">prototype</span>.<span style="color:#a6e22e">toString</span>.<span style="color:#a6e22e">call</span>(<span style="color:#a6e22e">bool</span>));<span style="color:#75715e">//[object Boolean]
</span><span style="color:#75715e"></span><span style="color:#a6e22e">console</span>.<span style="color:#a6e22e">log</span>(Object.<span style="color:#a6e22e">prototype</span>.<span style="color:#a6e22e">toString</span>.<span style="color:#a6e22e">call</span>(<span style="color:#a6e22e">num</span>));<span style="color:#75715e">//[object Number]
</span><span style="color:#75715e"></span><span style="color:#a6e22e">console</span>.<span style="color:#a6e22e">log</span>(Object.<span style="color:#a6e22e">prototype</span>.<span style="color:#a6e22e">toString</span>.<span style="color:#a6e22e">call</span>(<span style="color:#a6e22e">str</span>));<span style="color:#75715e">//[object String]
</span><span style="color:#75715e"></span><span style="color:#a6e22e">console</span>.<span style="color:#a6e22e">log</span>(Object.<span style="color:#a6e22e">prototype</span>.<span style="color:#a6e22e">toString</span>.<span style="color:#a6e22e">call</span>(<span style="color:#a6e22e">und</span>));<span style="color:#75715e">//[object Undefined]
</span><span style="color:#75715e"></span><span style="color:#a6e22e">console</span>.<span style="color:#a6e22e">log</span>(Object.<span style="color:#a6e22e">prototype</span>.<span style="color:#a6e22e">toString</span>.<span style="color:#a6e22e">call</span>(<span style="color:#a6e22e">nul</span>));<span style="color:#75715e">//[object Null]
</span><span style="color:#75715e"></span><span style="color:#a6e22e">console</span>.<span style="color:#a6e22e">log</span>(Object.<span style="color:#a6e22e">prototype</span>.<span style="color:#a6e22e">toString</span>.<span style="color:#a6e22e">call</span>(<span style="color:#a6e22e">arr</span>));<span style="color:#75715e">//[object Array]
</span><span style="color:#75715e"></span><span style="color:#a6e22e">console</span>.<span style="color:#a6e22e">log</span>(Object.<span style="color:#a6e22e">prototype</span>.<span style="color:#a6e22e">toString</span>.<span style="color:#a6e22e">call</span>(<span style="color:#a6e22e">obj</span>));<span style="color:#75715e">//[object Object]
</span><span style="color:#75715e"></span><span style="color:#a6e22e">console</span>.<span style="color:#a6e22e">log</span>(Object.<span style="color:#a6e22e">prototype</span>.<span style="color:#a6e22e">toString</span>.<span style="color:#a6e22e">call</span>(<span style="color:#a6e22e">fun</span>));<span style="color:#75715e">//[object Function]
</span></code></pre></div><p>也来皮一下</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js"><span style="color:#66d9ef">const</span> <span style="color:#a6e22e">o</span> <span style="color:#f92672">=</span> {
    <span style="color:#a6e22e">get</span> [<span style="color:#a6e22e">Symbol</span>.<span style="color:#a6e22e">toStringTag</span>] () {
        <span style="color:#66d9ef">return</span> <span style="color:#e6db74">&#39;Array&#39;</span>
    }
}

Object.<span style="color:#a6e22e">prototype</span>.<span style="color:#a6e22e">toString</span>.<span style="color:#a6e22e">call</span>(<span style="color:#a6e22e">o</span>) <span style="color:#75715e">// [object Array]
</span></code></pre></div><h4 id="衍生">衍生</h4>
<p>lodash</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js"><span style="color:#ae81ff">_</span>.<span style="color:#a6e22e">isArrayLike</span>(<span style="color:#66d9ef">function</span>(){<span style="color:#66d9ef">return</span> <span style="color:#a6e22e">arguments</span>}());
<span style="color:#ae81ff">_</span>.<span style="color:#a6e22e">isArrayLike</span>([<span style="color:#ae81ff">1</span>, <span style="color:#ae81ff">2</span>, <span style="color:#ae81ff">3</span>])
<span style="color:#ae81ff">_</span>.<span style="color:#a6e22e">isArrayLike</span>(document.<span style="color:#a6e22e">body</span>.<span style="color:#a6e22e">children</span>)
<span style="color:#ae81ff">_</span>.<span style="color:#a6e22e">isArrayLike</span>(<span style="color:#e6db74">&#39;abc&#39;</span>)
<span style="color:#ae81ff">_</span>.<span style="color:#a6e22e">isNil</span>(<span style="color:#66d9ef">null</span><span style="color:#f92672">|</span><span style="color:#66d9ef">undefined</span>)
</code></pre></div><p>原生方法 Array.isArray() Number.isNaN()(isNaN()的问题是什么) etc.</p>
<p>其实这是某天组内分享的准备内容,原因还要从一个bug说起.(然而这个bug我已经忘了,只剩下这么一篇干巴巴的记录)</p>
]]></content>
        </item>
        
        <item>
            <title>再一次的你好世界...</title>
            <link>https://blog.zzzzz.li/posts/first-blog-post/</link>
            <pubDate>Tue, 27 Oct 2020 17:11:43 +0800</pubDate>
            
            <guid>https://blog.zzzzz.li/posts/first-blog-post/</guid>
            <description>就第一篇博文嘛 这篇文章测试 github 的 actions.</description>
            <content type="html"><![CDATA[<h2 id="就第一篇博文嘛">就第一篇博文嘛</h2>
<p>这篇文章测试 github 的 <code>actions</code>.</p>
]]></content>
        </item>
        
    </channel>
</rss>
